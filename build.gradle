defaultTasks 'createImages'

task buildImages(dependsOn: ['buildJenkins','buildSonar']){
}

task buildJenkins(type: Exec) {
    workingDir 'dockerFiles/jenkins/'
    commandLine '/usr/local/bin/docker', 'build', '-t', 'easybuilder_jenkins:0.1', '.'
}

task buildSonar(type: Exec) {
    workingDir 'dockerFiles/sonar/'
    commandLine '/usr/local/bin/docker', 'build', '-t', 'easybuilder_sonar:0.1', '.'
}

/*
task runImages(type: Exec) {
    commandLine 'sh', 'scripts/start_images.sh'
}
*/

task runImages(dependsOn: ['runSonar','runJenkins']) {
}

task runSonar(type: Exec) {
    commandLine '/usr/local/bin/docker', 'run', '-p', '19000:9000', '-p', '15432:5432', '--name', 'sonar01',  '-i', '-t', 'easybuilder_sonar:0.1'
}

task runJenkins(type: Exec) {
    commandLine '/usr/local/bin/docker', 'run',  '-p', '18080:8080', '--name', 'jenkins01',  '-i', '-t', 'easybuilder_jenkins:0.1'
}

task stopRemoveImages(dependsOn: ['removeSonar','removeJenkins']) {
}

task stopSonar(type: Exec) {
    commandLine '/usr/local/bin/docker', 'stop', 'sonar01'
}
task removeSonar(type: Exec,dependsOn: 'stopSonar') {
    commandLine '/usr/local/bin/docker', 'rm', 'sonar01'
}

task stopJenkins(type: Exec) {
    commandLine '/usr/local/bin/docker', 'stop', 'jenkins01'
}
task removeJenkins(type: Exec,dependsOn: 'stopJenkins') {
    commandLine '/usr/local/bin/docker', 'rm', 'jenkins01'
}




task checkInternet() {
    doLast {
        if (checkInternetConnection()) {
            System.out.println("true");
        } else {
            System.out.println("false");
            //throw new GradleException('no internet connection might be proxy settings')
        }
        if (checkInternetConnectionProxy()) {
            System.out.println("true proxy");
        } else {
            System.out.println("false proxy");
            throw new GradleException('proxy no internet connection might be proxy settings')
        }
    }
}



def checkInternetConnection() {
    int timeout = 1500;
    try {
        return InetAddress.getByName("www.nl.cx").isReachable(timeout)
    } catch (Exception e) {
        System.out.println("Unknown Host: " + e);
    }
    return false;
}

def checkInternetConnectionProxy() {
    int timeout = 1500;
    try {
        System.setProperty("https.proxyHost", "10.12.9.101");
        System.setProperty("https.proxyPort", "8080");
        return InetAddress.getByName("www.nl.cx").isReachable(timeout)
    } catch (Exception e) {
        System.out.println("Unknown Host: " + e);
    }
    return false;
}


